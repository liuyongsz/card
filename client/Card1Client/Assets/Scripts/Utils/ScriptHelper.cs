//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEngine;
using System.Reflection;
using System.Collections.Generic;

public class ScriptHelper
{
   
    public static Component BindField(Transform target, string classname, bool containSelf = false)
    {
        // DebugLog.LogErrorWithTime("star");
        //根据类名获取type
        Type t = Type.GetType(classname);
        if (t == null)
        {
            return null;
        }
        //获取组件上绑定的脚本
        Component component = target.GetComponent(t);
        if (component == null)//如果没有获取到直接添加
            component = target.gameObject.AddComponent(t);

        Type type = Type.GetType(classname);

        FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance);
        FieldInfo field;
        Component[] coms;
        Component com;
        Type hideType = typeof(HideInInspector);
        int clen;
        int len = fields.Length;

        for (int i = 0; i < len; i++)
        {

            field = fields[i];

            if (field.IsDefined(hideType, true))
            {

                continue;
            }

            if (!containSelf)
            {
                coms = target.GetComponentsInChildren(field.FieldType, true);
            }
            else
            {
                coms = target.GetComponentsInChildren(field.FieldType, true);
                coms.CopyTo(target.transform.GetComponents(field.FieldType), 0);
            }

            if (coms == null) continue;

            clen = coms.Length;
            for (int j = 0; j < clen; j++)
            {

                com = coms[j];

                if (com.name.CompareTo(field.Name) == 0)
                {

                    field.SetValue(component, com);
                    break;
                }
            }
        }

        return component;
    }
}

